{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cela","text":"<p>This tool helps you increment/decrement semantic versions in files using custom scripts and ergonomic shell commands.</p>"},{"location":"#how-to-use","title":"How to Use","text":"<p>Tip</p> <p>Setup a few custom parsers first.</p> Option Description <code>-h, --help</code> Show this help. <code>-V, --version</code> Show the version number for this program. <code>-d, --debug</code> Enable debug logs. Useful if you want to debug your parsers. <code>-D, --dry-run</code> Do a dry run. Skips running updater script (fetcher script is ran). <code>-r, --no-reset</code> Do not reset by precedence. Disables specification 7 of semantic versioning. Read here. <code>-Z, --no-zero</code> Do not reset when a version is less than 0. <code>-C, --custom &lt;version&gt;</code> Instead of incrementing, set the version to this string. <code>-M</code> Increment MAJOR version by 1. Can be used multiple times. <code>-m</code> Increment MINOR version by 1. Can be used multiple times. <code>-p</code> Increment PATCH version by 1. Can be used multiple times. <code>-z</code> Decrement MAJOR version by 1. Can be used multiple times. <code>-x</code> Decrement MINOR version by 1. Can be used multiple times. <code>-c</code> Decrement PATCH version by 1. Can be used multiple times. <p>You can chain these options. For example, <code>-MMM</code> will increment major version from 0 to 3; similarly <code>-Mmp</code> would increment major, minor, and patch versions by 1.</p> <p>You can then provide the parser id (the folder name under <code>parsers_dir</code> directory) as an argument. E.g., <code>cela -MMp deno</code> would call the <code>deno</code> parser to update the version.</p>"},{"location":"#examples","title":"Examples","text":"Example IExample IIExample IIIExample IV <pre><code>&gt; cela -MMppm deno\n[WARN] MINOR version has been updated from 2 to 0 because it was supposed to be reset back to 0 as per protocol. See -r option.\n[WARN] PATCH version has been updated from 2 to 0 because it was supposed to be reset back to 0 as per protocol. See -r option.\n[INFO] The operation was successful.\n[INFO] Updated version from 0.1.0 to 2.0.0.\n</code></pre> <pre><code>&gt; cela -MMzmmxppc python\n[WARN] MINOR version has been updated from 2 to 0 because it was supposed to be reset back to 0 as per protocol. See -r option.\n[WARN] PATCH version has been updated from 1 to 0 because it was supposed to be reset back to 0 as per protocol. See -r option.\n[INFO] The operation was successful.\n[INFO] Updated version from 0.1.0 to 1.0.0.\n</code></pre> <pre><code>&gt; cela -rMMzmmxppc deno\n[INFO] The operation was successful.\n[INFO] Updated version from 0.1.0 to 1.2.1.\n</code></pre> <pre><code>&gt; cela -C 0.1.0 deno\n[INFO] The operation was successful.\n[INFO] Updated version from 1.2.1 to 0.1.0 (custom).\n</code></pre>"},{"location":"#custom-parsers","title":"Custom Parsers","text":"<p>See Custom Parsers.</p>"},{"location":"custom-parsers/","title":"Custom Parsers","text":"<p>You first configure a directory in Cela's configuration file. This directory will contain your parsers.</p> Linux Windows Darwin <code>$XDG_CONFIG_HOME/cela/config.yml</code> <code>$APP_DATA/cela/config.yml</code> Not supported. <code>$HOME/.config/cela/config.yml</code> .../cela/config.yml<pre><code>parsers_dir: ... # (1)\n</code></pre> <ol> <li>For example, <code>/home/myxi/Documents/parsers</code></li> </ol> <p>Warning</p> <p>Please use absolute paths instead of relative ones. Cela does not handle relative paths.</p> <p>Next up, create a sub-directory in the configured directory (<code>parsers_dir</code>). Whatever you name it will be considered as the parser's id. For my example I will call it <code>deno</code>.</p> <p>Now create a configuration file for your parser, <code>cela.yml</code>,</p> .../deno/cela.yml<pre><code>name: \"Hello World\"\nscripts:\n  fetcher:\n    program: \"python\"\n    args: \"fetcher.py\"\n  updater:\n    program: \"python\"\n    args: \"updater.py\"\n</code></pre> <p>Note</p> <p>You don't need to write your scripts in Python. But for now I am keeping it simple and assuming you wrote your scripts in Python.</p> Key Purpose <code>name</code> Name of your parser. It doesn't have much use for now. <code>scripts</code> The scripts for your parser. <code>fetcher</code> and <code>updater</code> options are available. <code>scripts.fetcher</code> This script parses the version from target file. More information later. <code>scripts.updater</code> This script updates the version to the incremented one in the target file. <code>scripts.[fetcher,updater].program</code> The executable that can be accessed from the directories in your <code>$PATH</code>. It will be used to run the script. <code>scripts.[fetcher,updater].args</code> The arguments to be used with the executable to make it execute your script. <p>In your parser's directory you need to have a source tree like this:</p> .../deno/<pre><code>.\n\u251c\u2500\u2500 cela.yml\n\u251c\u2500\u2500 fetcher.py\n\u2514\u2500\u2500 updater.py\n</code></pre> <p>To complete the example I will include the example script files for <code>deno</code>.</p> fetcher.pyupdater.py <pre><code>import json\nimport os\nimport sys\n\ndef main() -&gt; None:\n    with open(os.environ[\"CELA_CWD\"] + \"/deno.json\") as conf:\n        config = json.load(conf)\n        print(json.dumps(dict(version=config[\"version\"])), file=sys.stdout)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>import json\nimport os\n\ndef main() -&gt; None:\n    with open(os.environ[\"CELA_CWD\"] + \"/deno.json\", \"r+\") as conf:\n        config = json.load(conf)\n        conf.seek(0)\n\n        f_data = json.loads(os.environ[\"CELA_DATA_JSON\"])\n        config[\"version\"] = f_data[\"version\"]\n\n        conf.write(json.dumps(config, indent=4))\n        conf.truncate()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"custom-parsers/#expectations-from-cela","title":"Expectations From Cela","text":"<p>Fetcher script is expected to output a stringified JSON to <code>stdout</code> stream. This JSON must contain a <code>version</code> key which contains the version as a string that is supposed to be updated.</p> <p>Updater script will be assigned <code>CELA_DATA_JSON</code> environment variable which will contain the updated version string in the <code>version</code> key. There is also a <code>fetcher_json</code> key. For more information read Special Environment Variables.</p> <p>Note</p> <p>It will not error if other keys are assigned. You can share information from fetcher to updater script by utilizing this detail. See Sharing Information.</p> <p>Warning</p> <p>See Exit Codes.</p>"},{"location":"custom-parsers/#special-environment-variables","title":"Special Environment Variables","text":"<p>When the updater script is executed Cela assigns two environment variables to it:</p> Variable Purpose <code>CELA_CWD</code> Contains the working directory of Cela's process at the time its execution. This is helpful to pick your target file. <code>CELA_DATA_JSON</code> Contains a JSON that has two keys, <code>version</code> and <code>fetcher_json</code>. <p>Tip</p> <p>You don't need to worry if the version starts with <code>v</code> or <code>=</code>, the incrementation will still work and it will also assign it again after doing so.</p> <p>Note</p> <p>In case of the fetcher script only <code>CELA_CWD</code> is assigned. Please see Expectations From Cela.</p>"},{"location":"custom-parsers/#the-working-directory-of-the-scripts","title":"The Working Directory of the Scripts","text":"<p>Both scripts will have their parser directory they belong to as the working directory.</p>"},{"location":"custom-parsers/#accessing-celas-working-directory","title":"Accessing Cela's Working Directory","text":"<p>You can access Cela's working directory via <code>CELA_CWD</code> environment variable.</p>"},{"location":"custom-parsers/#sharing-information","title":"Sharing Information","text":"<p>You can access the fetcher script's state from updater script via <code>CELA_DATA_JSON</code> environment variable. This JSON has <code>fetcher_json</code> key which contains the output from fetcher script. You can use it to get information from fetcher's script.</p>"},{"location":"custom-parsers/#debugging","title":"Debugging","text":"<p>You can see the outputs of your scripts when running with Cela by using <code>--debug</code> option to enable debug logs of Cela.</p>"},{"location":"custom-parsers/#exit-codes","title":"Exit Codes","text":"<p>Both fetcher and updater scripts must return exit code <code>0</code> to be considered a successful operation.</p>"}]}